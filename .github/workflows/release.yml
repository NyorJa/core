name: Release

on:
  release:
    types: [created]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2

    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 13
        server-id: github
        settings-path: ${{ github.workspace }}

    - name: Build with Maven
      run: ./mvnw -B clean install --file pom.xml -P docker
  
# Do not publish package in SNAPSHOT
# Or delete the previous one before
#   publish-package:
#     needs: build
#     runs-on: ubuntu-latest
#     steps:
#
#     - uses: actions/checkout@v2
# 
#     - name: Set up JDK
#       uses: actions/setup-java@v1
#         with:
#           java-version: 13
#           server-id: github
#           settings-path: ${{ github.workspace }}
# 
#       - name: Publish to GitHub Packages Apache Maven
#         run: ./mvnw deploy -s $GITHUB_WORKSPACE/settings.xml
#         env:
#           GITHUB_TOKEN: ${{ github.token }}

  publish-docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@v2

    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 13
        server-id: github
        settings-path: ${{ github.workspace }}

    - name: Build with Maven
      run: ./mvnw -B clean install --file pom.xml -P docker

    - uses: sjdonado/heroku@0f16401029a67519b6547af7247983640996393a

    - name: Tag the image
      run: docker tag core:latest docker.pkg.github.com/les-projets-cagnottes/core/core:latest
    
    - name: Login to Registry
      run: docker login docker.pkg.github.com -u thomah -p ${{secrets.GITHUB_TOKEN}}

    - name: Publish to Registry
      run: docker push docker.pkg.github.com/les-projets-cagnottes/core/core:latest

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v1

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

    - name: Create temp directory to copy files
      uses: appleboy/ssh-action@v0.0.7
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key : ${{ secrets.PRODUCTION_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        script: mkdir -p /opt/les-projets-cagnottes/core/deployment

    - name: Copy content recursively to production
      uses: appleboy/scp-action@v0.0.7
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key : ${{ secrets.PRODUCTION_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        source: "bin/deploy.sh,bin/les-projets-cagnottes-core.service,bin/setenv.sh.template,bin/les-projets-cagnottes-core.sh,target/core-${{ steps.get_version.outputs.VERSION }}.jar"
        target: /opt/les-projets-cagnottes/core/deployment
        rm: true
        
    - name: Execute deployment remotely
      uses: appleboy/ssh-action@v0.0.7
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key : ${{ secrets.PRODUCTION_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        script: (sudo chmod 755 /opt/les-projets-cagnottes/core/deployment/bin/deploy.sh) && (nohup /opt/les-projets-cagnottes/core/deployment/bin/deploy.sh ${{ steps.get_version.outputs.VERSION }} &>  /opt/les-projets-cagnottes/core/deployment/bin/console.log < /dev/null &) && exit 0
